//lab12
//1
/*#include <iostream>
#include <string>
using namespace std;
struct Plane {
    string id;
    string a_time;
    string l_time;
};
Plane parse_input() {
    Plane plane;
    cin >> plane.id >> plane.a_time >> plane.l_time;
    return plane;
}
int time(string s1, string s2) {
    int h1, m1, h2, m2;
    sscanf(s1.c_str(), "%d:%d", &h1, & m1);
    sscanf(s2.c_str(), "%d:%d", &h2, & m2);
    int t1 = h1 * 60 + m1;
    int t2 = h2 * 60 + m2;
    return t2 - t1;
}
int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        Plane plane = parse_input();
        if (time(plane.a_time, plane.l_time) > 120) {
            cout << plane.id<<" "<<plane.a_time<<" "<<plane.l_time<<endl;
        }
    }
}*/
//2
/*#include <iostream>
#include <string>
using namespace std;

struct stud {
    string name;
    int math;
    int eng;
    int prog;
};

stud parse_input() {
    stud s;
    getline(cin, s.name);
    cin >> s.math >> s.eng >> s.prog;
    cin.ignore();
    return s;
}

int main() {
    int n;
    cin >> n;
    cin.ignore();
    cout.precision(2);
    for (int i = 0; i < n; i++) {
        stud s = parse_input();
        float avg =(s.math + s.eng + s.prog) / 3.0;
        if (avg >= 4) {
            cout << s.name << " " << fixed << avg << endl;
        }
    }
}*/
//3
/*#include <iostream>
#include <string>
using namespace std;

struct stud {
    string name;
    double gpa;
    double stepuha;
};
stud parse_input() {
    stud s;
    cin >> s.name >> s.gpa >> s.stepuha;
    return s;
}
int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        stud s = parse_input();
        if (s.gpa > 4.5) {
            s.stepuha += s.stepuha * 0.3;
        } else if (s.gpa < 2) {
            continue;
        } else {
            s.stepuha += s.stepuha * 0.1;
        }
        cout << s.name << " will take " << s.stepuha << "(" << s.gpa << ")" << endl;
    }
}*/
//4
/*#include <iostream>
#include <string>
using namespace std;

struct Book {
    string name;
    string autor;
    double price;
    string type;
};
Book parse_input() {
    Book b;
    cin >> b.name >> b.autor >> b.price >> b.type;
    return b;
}

int main() {
    int n;
    cin >> n;
    cout.precision(2);
    cout << fixed;
    for (int i = 0; i < n; i++) {
        Book b = parse_input();
        if (b.type == "Classical") {
            b.price =b.price-b.price * 0.1;
        }
        else if (b.type == "Bestseller") {
            b.price =b.price+b.price * 0.2;
        }
        cout << b.name << " " << b.autor << " " << b.price << endl;
    }
}*/
//5
/*#include <iostream>
#include <string>
using namespace std;

struct Candidate {
    string name;
    string work;
    int income;
};
Candidate parse_input() {
    Candidate c;
    getline(cin, c.name);
    cin >> c.work >> c.income;
    cin.ignore();
    return c;
}
bool isEligible(const Candidate &c) {
    size_t spaceIndex = c.name.find(' ');
    string lastName = c.name.substr(spaceIndex + 1);
    return c.work != "banker" && c.income >= 1000 && lastName != "Johnson" && lastName != "Edisson";
}
int main() {
    int n;
    cin >> n;
    cin.ignore();
    for (int i = 0; i < n; i++) {
        Candidate c = parse_input();

        if (isEligible(c)) {
            cout << c.name << endl;
        }
    }
}*/
//6
/*#include <iostream>
#include <string>
using namespace std;

struct Ship {
    string name;
    string a_time;
    int s_time;
    bool status;
};
Ship parse_input() {
    Ship s;
    cin >> s.name >> s.a_time >> s.s_time >> s.status;
    return s;
}
int main() {
    int n;
    cin >> n;
    cin.ignore();
    for (int i = 0; i < n; i++) {
        Ship s = parse_input();
        if (s.status==1){
            cout<<s.name<<endl;
        }
        else{
            int h,m;
            sscanf(s.a_time.c_str(), "%d:%d", &h, & m);
            int t=h*60+m;
            if (t<600 && (t+s.s_time)<600){
                cout<<s.name<<endl;
            }
        }
    }
}*/
//7
/*#include <iostream>

using namespace std;

struct Plane {
    string name;
    string arrival_time;
    string departure_time;
};

Plane parse_input() {
    Plane p;
    cin >> p.name >> p.arrival_time >> p.departure_time;
    return p;
}

int time_diff(const string& time1, const string& time2) {
    int h1, m1, h2, m2;
    sscanf(time1.c_str(), "%d:%d", &h1, &m1);
    sscanf(time2.c_str(), "%d:%d", &h2, &m2);
    return (h2 * 60 + m2) - (h1 * 60 + m1);
}

int main() {
    int n;
    cin >> n;

    if (n == 0) {
        cout << "No planes available for processing" << endl;
        return 0;
    }

    Plane planes[n];
    for (int i = 0; i < n; ++i) {
        planes[i] = parse_input();
    }

    bool window_found = false;
    const int MAX_GAP = 10000;

    if (n == 1) {
        cout << planes[0].departure_time << " " << planes[0].name << " free" << endl;
        window_found = true;
    } else {
        for (int i = 0; i < n - 1; ++i) {
            int gap = time_diff(planes[i].departure_time, planes[i + 1].arrival_time);
            
            if (gap >= 60 && gap < MAX_GAP) {
                cout << planes[i].departure_time << " between " << planes[i].name << " and " << planes[i + 1].name << endl;
                window_found = true;
                break;
            }
        }
    }
    if (!window_found) {
        cout << "No suitable window found" << endl;
    }
}*/