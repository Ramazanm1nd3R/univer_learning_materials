package com.example.eventmanagerproject.network;

import com.example.eventmanagerproject.db.EventDAO;
import com.example.eventmanagerproject.db.UserDAO;
import com.example.eventmanagerproject.model.Event;
import com.example.eventmanagerproject.model.User;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class ServerApp {

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(9999)) {
            log("‚úÖ Server started. Waiting for clients...");
            while (true) {
                Socket clientSocket = serverSocket.accept();
                log("üë§ New client connected from " + clientSocket.getInetAddress().getHostAddress() + ":" + clientSocket.getPort());
                new Thread(() -> handleClient(clientSocket)).start();
            }
        } catch (Exception e) {
            log("‚ùå Server error: " + e.getMessage());
        }
    }

    private static void handleClient(Socket socket) {
        try (
                ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
                ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream())
        ) {
            Request request = (Request) input.readObject();
            log("üì© Received request: " + request.getType());

            Response response = handleRequest(request);
            output.writeObject(response);

            log("‚úÖ Response sent: " + response.getMessage());
        } catch (Exception e) {
            log("‚ùå Client error: " + e.getMessage());
        }
    }

    private static Response handleRequest(Request request) {
        UserDAO userDAO = new UserDAO();
        EventDAO eventDAO = new EventDAO();

        switch (request.getType()) {
            case "REGISTER":
                User newUser = (User) request.getPayload();
                boolean registered = userDAO.addUser(newUser);
                if (registered) {
                    User saved = userDAO.getUserByEmail(newUser.getEmail());
                    return new Response(true, saved, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
                }
                return new Response(false, null, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ email –∑–∞–Ω—è—Ç");

            case "LOGIN":
                @SuppressWarnings("unchecked")
                Map<String, String> credentials = (Map<String, String>) request.getPayload();
                User found = userDAO.getUserByEmail(credentials.get("email"));
                if (found != null && found.getPassword().equals(credentials.get("password"))) {
                    return new Response(true, found, "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω");
                }
                return new Response(false, null, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");

            case "CREATE_EVENT":
                Event newEvent = (Event) request.getPayload();
                boolean added = eventDAO.addEvent(newEvent);
                return new Response(added, null, added ? "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ" : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");

            case "GET_EVENTS":
                List<Event> events = eventDAO.getAllEvents();
                return new Response(true, events, "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω");

            case "COUNT_PARTICIPANTS":
                int eventId = (Integer) request.getPayload();
                int count = eventDAO.countParticipants(eventId);
                return new Response(true, count, "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: " + count);

            case "JOIN_EVENT":
                @SuppressWarnings("unchecked")
                Map<String, Integer> joinData = (Map<String, Integer>) request.getPayload();
                boolean joined = eventDAO.addParticipant(joinData.get("eventId"), joinData.get("userId"));
                return new Response(joined, null, joined ? "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!" : "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –∏–ª–∏ –æ—à–∏–±–∫–∞");

            case "CHECK_PARTICIPATION":
                Map<String, Integer> check = (Map<String, Integer>) request.getPayload();
                boolean exists = eventDAO.isUserParticipant(check.get("eventId"), check.get("userId"));
                return new Response(exists, null, exists ? "–£—á–∞—Å—Ç–≤—É–µ—Ç" : "–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç");

            case "LEAVE_EVENT":
                Map<String, Integer> leave = (Map<String, Integer>) request.getPayload();
                boolean removed = eventDAO.removeParticipant(leave.get("eventId"), leave.get("userId"));
                return new Response(removed, null, removed ? "–£—á–∞—Å—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ");

            case "GET_USER_BY_ID":
                int id = (Integer) request.getPayload();
                User creator = userDAO.getUserById(id);
                if (creator != null) {
                    return new Response(true, creator, "–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω");
                }
                return new Response(false, null, "–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");

            default:
                return new Response(false, null, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞");
        }
    }

    private static void log(String message) {
        String time = new SimpleDateFormat("HH:mm:ss").format(new Date());
        System.out.println("[" + time + "] " + message);
    }
}
